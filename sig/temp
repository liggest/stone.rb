module Stone
  module AST
    TRUE: 1

    FALSE: 0

    class Node
      def eval: (untyped env) -> untyped
    end

    class NumLiteral < Leaf
      def eval: (untyped env) -> untyped
    end

    class StrLiteral < Leaf
      def eval: (untyped env) -> untyped
    end

    class Name < Leaf
      def eval: (untyped env) -> untyped
    end

    class NegExpr < List
      def eval: (untyped env) -> untyped
    end

    class BinExpr < List
      def eval: (untyped env) -> untyped

      def do_assign: (untyped env, untyped rval) -> untyped

      def do_op: (untyped lval, untyped op, untyped rval) -> untyped

      def num_compute: (untyped lval, untyped op, untyped rval) -> untyped
    end

    class BlockStmnt < List
      def eval: (untyped env) -> untyped
    end

    module EvalCondition
      def turthy?: (untyped con) -> untyped
    end

    class IfStmnt < List
      include EvalCondition

      def eval: (untyped env) -> untyped
    end

    class WhileStmnt < List
      include EvalCondition

      def eval: (untyped env) -> untyped
    end
  end
end
