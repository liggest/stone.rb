
module Stone
  interface _Env
    def set: (String name, Object val) -> void
    def get: (String name) -> Object
    # dont check wether outer has `name`
    def set!: (String name, Object val) -> void
    def where: (String name) -> _Env?
    def outer=: (_Env env) -> void
  end
  
  class BasicEnv
    include _Env

    attr_reader vals: Hash[String,Object]

    def initialize: () -> void
                  
    def fetch: ?{ -> Object } -> Object
                  
    alias [] get
    alias []= set

  end

  class NestedEnv
    include _Env
    attr_reader vals: Hash[String,Object]
    attr_reader outer: _Env?

    def initialize: (?_Env? env) -> void
    
  end
end
